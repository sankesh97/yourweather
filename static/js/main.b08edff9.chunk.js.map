{"version":3,"sources":["assets/Your-Weather.svg","components/WeatherInput/WeatherInput.js","components/WindDirection/WindDirection.js","components/WeatherOutput/WeatherOutput.js","components/WeatherIcon/WeatherIcon.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherInput","props","useState","cityName","cityNameHandler","Form","Group","Label","Control","type","placeholder","value","onChange","event","target","Button","variant","onClick","btnclick","WindDirection","direction","className","style","fontSize","speed","WeatherOutput","width","weather","main","temp","name","sys","country","feels_like","wind","deg","humidity","parseInt","visibility","pressure","Date","sunrise","toLocaleTimeString","sunset","WeatherIcon","theicon","isitnight","weathercond","color","App","weatherHandler","error","errorHandler","weather_out","weather_icon_out","dt","id","src","yourWeatherLogo","alt","ele","Axios","get","then","response","data","window","location","assign","catch","onLoading","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b08edff9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Your-Weather.43d9964e.svg\";","import React, { useState } from 'react';\nimport { Form, Button } from 'react-bootstrap';\n\nconst WeatherInput = (props) => {\n  let [cityName, cityNameHandler] = useState('');\n  const onClickHandler = () => {\n    props.btnclick(cityName);\n  };\n\n  return (\n    <>\n      <Form>\n        <Form.Group>\n          <Form.Label>City Name</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter City Name\"\n            value={cityName}\n            onChange={(event) => cityNameHandler(event.target.value)}\n          />\n        </Form.Group>\n\n        <Button variant=\"primary\" onClick={onClickHandler}>\n          Submit It\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default WeatherInput;\n","import React from \"react\";\nimport \"../../assets/css/weather-icons.min.css\";\nimport \"../../assets/css/weather-icons-wind.min.css\";\n\nlet WindDirection = (props) => {\n  let direction = \"wi wi-wind towards-\" + props.direction + \"-deg\";\n  return (\n    <div>\n      <i className={direction} style={{ fontSize: \"1.2rem\" }}></i>&ensp;Wind\n      Speed : {props.speed} m/s\n    </div>\n  );\n};\n\nexport default WindDirection;\n","import React from \"react\";\nimport WindDirection from \"../WindDirection/WindDirection\";\n\nlet WeatherOutput = (props) => {\n  return (\n    <div className=\"card mb-3\" style={{ width: \"18rem\" }}>\n      <div className=\"card-body\">\n        <h5 className=\"card-title\" style={{ fontSize: \"2rem\"}}>\n          {props.weather.main.temp}\n          &nbsp;<i className=\"wi wi-celsius\"></i>\n          <br></br>\n          {props.weather.name}, {props.weather.sys.country}\n        </h5>\n        <p className=\"card-text\">\n          Feels like &nbsp;\n          {props.weather.main.feels_like} Â°C.&nbsp;\n          {props.weather.weather[0].main}.\n        </p>\n      </div>\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          <WindDirection\n            speed={props.weather.wind.speed}\n            direction={props.weather.wind.deg}\n          ></WindDirection>\n        </li>\n        <li className=\"list-group-item\">\n          <i className=\"wi wi-humidity\"></i>&nbsp; Humidity :{\" \"}\n          {props.weather.main.humidity}%\n        </li>\n        <li className=\"list-group-item\">\n          Visibility : {parseInt(props.weather.visibility) / 1000} Km\n        </li>\n        <li className=\"list-group-item\">\n          Pressure : {props.weather.main.pressure}hPa\n        </li>\n        <li className=\"list-group-item\">\n          <i className=\"wi wi-sunrise\"></i>&nbsp;{\" \"}\n          {new Date(props.weather.sys.sunrise * 1000).toLocaleTimeString()}\n          &emsp; | &emsp;\n          <i className=\"wi wi-sunset\"></i>\n          &nbsp;{new Date(props.weather.sys.sunset * 1000).toLocaleTimeString()}\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default WeatherOutput;\n","import React from \"react\";\n\nlet WeatherIcon = (props) => {\n  let theicon =\n    \"wi wi-owm-\" +\n    (props.isitnight ? \"night\" : \"day\") +\n    \"-\" +\n    props.weathercond +\n    \" mt-3\";\n  return (\n    <div>\n      <i className={theicon} style={{ fontSize: \"8rem\", color: props.isitnight===\"night\" ? \"black\" : \"white\" }}></i>\n    </div>\n  );\n};\n\nexport default WeatherIcon;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Axios from 'axios';\nimport yourWeatherLogo from './assets/Your-Weather.svg';\nimport './assets/css/weather-icons.min.css';\nimport WeatherInput from './components/WeatherInput/WeatherInput';\nimport WeatherOutput from './components/WeatherOutput/WeatherOutput';\nimport WeatherIcon from './components/WeatherIcon/WeatherIcon';\n\nconst App = (props) => {\n  const [weather, weatherHandler] = useState(null);\n  const [error, errorHandler] = useState(null);\n\n  const onLoading = (ele) => {\n    Axios.get(\n      'https://api.openweathermap.org/data/2.5/weather?q=' +\n        ele +\n        '&appid=' +\n        process.env.REACT_APP_OPEN_WEATHER_KEY +\n        '&units=metric'\n    )\n      .then((response) => {\n        errorHandler(null);\n        weatherHandler(response.data);\n        window.location.assign('#2');\n      })\n      .catch((response) => {\n        errorHandler('404');\n        window.location.assign('#2');\n      });\n  };\n\n  let weather_out = '';\n  let weather_icon_out = '';\n\n  if (weather && !error) {\n    weather_icon_out = (\n      <WeatherIcon\n        isitnight={\n          weather.sys.sunset < weather.dt || weather.sys.sunrise > weather.dt\n            ? true\n            : false\n        }\n        weathercond={weather.weather[0].id}\n      ></WeatherIcon>\n    );\n  } else if (error) {\n    weather_icon_out = <p>No Data = No Image</p>;\n  }\n\n  if (weather && !error) {\n    weather_out = <WeatherOutput weather={weather}></WeatherOutput>;\n  } else if (error) {\n    weather_out = <p>Do you even know how to spell the city's name ?</p>;\n  }\n\n  return (\n    <div>\n      <div className=\"section container text-center\" id=\"1\">\n        <div className=\"row\">\n          <div className=\"col-sm-6 p-5\">\n            <img src={yourWeatherLogo} alt=\"Rain\" className=\"img-fluid\"></img>\n          </div>\n          <div className=\"col-sm-6 d-flex flex-column justify-content-center\">\n            <WeatherInput btnclick={(ele) => onLoading(ele)}></WeatherInput>\n          </div>\n        </div>\n      </div>\n      <div className=\"section container text-center\" id=\"2\">\n        <div className=\"row\">\n          <div className=\"col-sm-6 d-flex justify-content-center align-items-center p-5\">\n            {weather_icon_out}\n          </div>\n          <div className=\"col-sm-6\">\n            <div className=\"d-flex justify-content-center p-5\">\n              {weather_out}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}